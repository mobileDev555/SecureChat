/** * Copyright (C) 2010-2012 Regis Montoya (aka r3gis - www.r3gis.fr) * This file is part of CSipSimple. * <p> * CSipSimple is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * If you own a pjsip commercial license you can also redistribute it * and/or modify it under the terms of the GNU Lesser General Public License * as an android library. * <p> * CSipSimple is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * <p> * You should have received a copy of the GNU General Public License * along with CSipSimple.  If not, see <http://www.gnu.org/licenses/>. */package com.realapps.chat.ui.ui.view.java;import android.annotation.SuppressLint;import android.app.SearchManager;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.database.Cursor;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.support.annotation.RequiresApi;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.ActionMode;import android.view.Gravity;import android.view.Menu;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.EditorInfo;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.AutoCompleteTextView;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.SearchView;import android.widget.TextView;import com.google.gson.Gson;import com.realapps.chat.BuildConfig;import com.realapps.chat.R;import com.realapps.chat.data.database.DbHelper;import com.realapps.chat.model.ContactEntity;import com.realapps.chat.model.EccContactConferenceList;import com.realapps.chat.ui.api.GlobalClass;import com.realapps.chat.ui.api.SipManager;import com.realapps.chat.ui.api.SipProfile;import com.realapps.chat.ui.helper.PrefManager;import com.realapps.chat.ui.ui.view.java.adapter.ConferenceContactAdapter;import com.realapps.chat.ui.ui.view.kotlin.model.URLCollection;import com.realapps.chat.utils.CommonUtils;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.List;import java.util.regex.Pattern;public class AddContactForConference extends AppCompatActivity implements OnItemClickListener        , View.OnTouchListener, View.OnClickListener, SearchView.OnQueryTextListener {    private ListView completeList;    private SearchView searchView;    private MenuItem searchMenuItem;    private ConferenceContactAdapter contactsAdapter;    static List<ContactEntity> contactList;    static List<EccContactConferenceList> conference_list;    ContactEntity entity;    EccContactConferenceList eccContactConferenceList;    DbHelper db;    EditText etAllContSearch;    Context ctx;    PrefManager pref;    Button ok;    String number;    Toolbar tool;    TextView tv;    GlobalClass gc;    ArrayList<String> newContactArr;    TextView error;    String conferenceNum, hanupContactbook;    @Override    protected void onStart() {        super.onStart();        //System.out.println("InCall Activity : AddContactForConference true");        SharedPreferences sp = getSharedPreferences("OURINFO", MODE_PRIVATE);        SharedPreferences.Editor ed = sp.edit();        ed.putBoolean("addParticipantActive", true);        ed.commit();    }    @Override    protected void onStop() {        super.onStop();        //System.out.println("InCall Activity : AddContactForConference false");        SharedPreferences sp = getSharedPreferences("OURINFO", MODE_PRIVATE);        SharedPreferences.Editor ed = sp.edit();        ed.putBoolean("addParticipantActive", false);        ed.commit();    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // Fabric.with(this, new Crashlytics());        requestWindowFeature(Window.FEATURE_NO_TITLE);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,                WindowManager.LayoutParams.FLAG_FULLSCREEN);        if (!BuildConfig.DEBUG)            getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);        setContentView(R.layout.add_call_new);        ctx = this;        newContactArr = new ArrayList<>();        gc = GlobalClass.getInstance();        etAllContSearch = (EditText) findViewById(R.id.dialtxt_user);        error = (TextView) findViewById(R.id.txtError);        ok = (Button) findViewById(R.id.ok);        //etAllContSearch.requestFocus();        contactList = new ArrayList<>();        conference_list = new ArrayList<>();        pref = new PrefManager(getApplicationContext());        Bundle b = getIntent().getExtras();        if (b != null) {            hanupContactbook = b.getString("isCallHangup");        }        db = new DbHelper(ctx);        if (hanupContactbook == null) {            //ArrayList<String> hangup = new ArrayList<>();            //hangup.add("");            pref.setConferenceContact(ctx, null);        }        etAllContSearch.setOnTouchListener(this);        etAllContSearch.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_search, 0, 0, 0);        /*domainTextHelper = (TextView) findViewById(R.id.dialtxt_domain_helper);*/        completeList = (ListView) findViewById(R.id.autoCompleteList);        etAllContSearch.addTextChangedListener(new TextWatcher() {            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {                afterTextChanged(etAllContSearch.getText());                String newText = etAllContSearch.getText().toString();                if (etAllContSearch.getText().toString().length() > 0) {                    etAllContSearch.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_close, 0);                } else {                    etAllContSearch.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_search, 0, 0, 0);                }                if (contactsAdapter != null) {                    contactsAdapter.getFilter().filter(s);                }            }            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {                if (etAllContSearch.getText().toString().length() == 0 || etAllContSearch.getText().toString() == "") {                    // fab.show();                } else {                }            }            @Override            public void afterTextChanged(Editable s) {                if (etAllContSearch.getText().toString().length() == 0 || etAllContSearch.getText().toString() == "") {                    //fab.show();                } else {                }            }        });        // etAllContSearch.addTextChangedListener(mSearchTw);        contactList = db.getContactList();        String ecc_id, screen_name;        String callingNum = gc.getLastCalledNum(ctx);        conferenceNum = pref.getAddedContacts(this);        if (contactList.size() != 0) {            error.setVisibility(View.GONE);            completeList.setVisibility(View.VISIBLE);            for (int i = 0; i < contactList.size(); i++) {                entity = contactList.get(i);                eccContactConferenceList = new EccContactConferenceList();                if (!entity.getEccId().toLowerCase().contains(callingNum.toLowerCase())) {                    ecc_id = entity.getEccId();                    screen_name = CommonUtils.getContactName(ctx, entity.getEccId());                    eccContactConferenceList.setEccId(ecc_id);                    eccContactConferenceList.setScreenName(screen_name);                    conference_list.add(eccContactConferenceList);                }            }            if (conference_list.size() != 0) {                contactsAdapter = new ConferenceContactAdapter(ctx, conference_list, R.layout.search_contact_list_item_2, AddContactForConference.this, this);                completeList.setAdapter(contactsAdapter);            } else {                error.setVisibility(View.VISIBLE);                completeList.setVisibility(View.GONE);            }        } else {            error.setVisibility(View.VISIBLE);            completeList.setVisibility(View.GONE);        }        //hanupContactbook = pref.getAddedContactsAtHangup(this);        /*if(conferenceNum != null){                Gson gson = new Gson();                String[] text = gson.fromJson(conferenceNum, String[].class);                for (int j = 0; j < text.length; j++) {                    String num = text[j];                    for (int i = 0; i < contactList.size(); i++) {                        entity = contactList.get(i);                        eccContactConferenceList = new EccContactConferenceList();                        //System.out.println("IncallActivity : Add Contact : Conference number 123 " + hanupContactbook);                        System.out.println("IncallActivity : Add Contact : Conference number size1 " + (contactList.size() - 1) + " textlength " + text.length);                        if((contactList.size() - 1) != text.length){                            error.setVisibility(View.GONE);                            completeList.setVisibility(View.VISIBLE);                            System.out.println("IncallActivity : Add Contact : Conference number if " + num);                            if (!entity.getEccId().toLowerCase().toString().contains(callingNum.toLowerCase().toString())){                                if(!entity.getEccId().toLowerCase().toString().equals(num.toLowerCase().toString())) {                                    ecc_id = entity.getEccId();                                    screen_name = entity.getScreenName();                                    eccContactConferenceList.setEccId(ecc_id);                                    eccContactConferenceList.setScreenName(screen_name);                                    conference_list.add(eccContactConferenceList);                                    System.out.println("IncallActivity : Add Contact : Conference number if 11 " + ecc_id);                                }else{                                    System.out.println("IncallActivity : Add Contact : Conference number else 11 ");                                    if(hanupContactbook != null && hanupContactbook.equals("yes")){                                        if(!entity.getEccId().toLowerCase().toString().equals(num.toLowerCase().toString())) {                                            pref.addContact(ctx, null);                                            ecc_id = entity.getEccId();                                            screen_name = entity.getScreenName();                                            eccContactConferenceList.setEccId(ecc_id);                                            eccContactConferenceList.setScreenName(screen_name);                                            conference_list.add(eccContactConferenceList);                                        }else{                                            ecc_id = entity.getEccId();                                            screen_name = entity.getScreenName();                                            eccContactConferenceList.setEccId(ecc_id);                                            eccContactConferenceList.setScreenName(screen_name);                                            conference_list.add(eccContactConferenceList);                                        }                                    }                                }                            }                        }else{                            if(hanupContactbook != null && hanupContactbook.equals("yes")){                                if(!entity.getEccId().toLowerCase().toString().contains(callingNum.toLowerCase().toString())){                                    System.out.println("IncallActivity : Add Contact : hangupContactBook " + hanupContactbook);                                    if(!entity.getEccId().toLowerCase().toString().equals(num.toLowerCase().toString())) {                                        System.out.println("IncallActivity : Add Contact : hangupContactBook if " + entity.getEccId());                                        System.out.println("IncallActivity : Add Contact : hangupContactBook if num " + num);                                        ecc_id = entity.getEccId();                                        screen_name = entity.getScreenName();                                        eccContactConferenceList.setEccId(ecc_id);                                        eccContactConferenceList.setScreenName(screen_name);                                        conference_list.add(eccContactConferenceList);                                    }                                }                            }                            *//*error.setVisibility(View.VISIBLE);                            completeList.setVisibility(View.GONE);                            ok.setVisibility(View.GONE);*//*                        }                        contactsAdapter = new ConferenceContactAdapter(ctx, conference_list, R.layout.search_contact_list_item_2, AddContactForConference.this, this);                        completeList.setAdapter(contactsAdapter);                    }                }        }else{*/        //}        /*System.out.println("Text 1 ADD " + conferenceNum);        if(conferenceNum != null){            Gson gson = new Gson();            String[] text = gson.fromJson(conferenceNum, String[].class);            System.out.println("Text 2 ADD " + text.length);            for (int j = 0; j < text.length; j++) {                String num = text[j];                System.out.println("Text 3 ADD " + num);                for (int i = 0; i < contactList.size(); i++) {                    entity = contactList.get(i);                    eccContactConferenceList = new EccContactConferenceList();                    *//*System.out.println("Text 4 ADD "+ entity.getEccId());                    System.out.println("Text 4 ADD :: "+ num.toLowerCase());*//*                    if (!entity.getEccId().toLowerCase().contains(num.toLowerCase())                            && !entity.getEccId().toLowerCase().equals(callingNum.toLowerCase())) {                        ecc_id = entity.getEccId();                        screen_name = entity.getScreenName();                        eccContactConferenceList.setEccId(ecc_id);                        eccContactConferenceList.setScreenName(screen_name);                        conference_list.add(eccContactConferenceList);                    }                }            }            Set<EccContactConferenceList> unique = new LinkedHashSet<EccContactConferenceList>(conference_list);            List<EccContactConferenceList> conference_list1 = new ArrayList<EccContactConferenceList>(unique);            contactsAdapter = new ConferenceContactAdapter(ctx, conference_list1, R.layout.search_contact_list_item_2, AddContactForConference.this, this);            completeList.setAdapter(contactsAdapter);        }*/        IntentFilter iFilter = new IntentFilter(SipManager.ACTION_ADD_PARTICIPENT_STOP);        registerReceiver(mStopCurrentActivity, iFilter);        ok.setOnClickListener(this);        completeList.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {            @Override            public void onItemCheckedStateChanged(ActionMode actionMode, int i, long l, boolean b) {                final int checkedCount = completeList.getCheckedItemCount();                // Set the  CAB title according to total checked items                actionMode.setTitle(checkedCount + "  Selected");                // Calls  toggleSelection method from ListViewAdapter Class                contactsAdapter.toggleSelection(i);            }            @SuppressLint("ResourceType")            @Override            public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {                actionMode.getMenuInflater().inflate(R.menu.main, menu);                return true;            }            @Override            public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {                return false;            }            @Override            public boolean onActionItemClicked(final ActionMode actionMode, MenuItem menuItem) {                return false;            }            @Override            public void onDestroyActionMode(ActionMode actionMode) {            }        });    }    private BroadcastReceiver mStopCurrentActivity = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            if (intent.getAction().equals(SipManager.ACTION_ADD_PARTICIPENT_STOP)) {                /*String removedContact = intent.getStringExtra("removedContact");                if(removedContact != null){                    hanupContactbook = removedContact;                }else {*/                SharedPreferences sp = getSharedPreferences("OURINFO", MODE_PRIVATE);                SharedPreferences.Editor ed = sp.edit();                ed.putBoolean("addParticipantActive", false);                ed.commit();                pref.addContact(context, null);                finish();                //}            }        }    };    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);        SearchManager searchManager = (SearchManager)                getSystemService(Context.SEARCH_SERVICE);        searchMenuItem = menu.findItem(R.id.action_search);        if (conference_list.size() != 0) {            searchMenuItem.setVisible(true);            searchView = (SearchView) searchMenuItem.getActionView();            searchView.setSearchableInfo(searchManager.                    getSearchableInfo(getComponentName()));            //searchView.setSubmitButtonEnabled(true);            searchView.setOnQueryTextListener(this);        } else {            searchMenuItem.setVisible(false);        }        return super.onCreateOptionsMenu(menu);    }    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        MenuItem searchViewMenuItem = menu.findItem(R.id.action_search);        searchView = (SearchView) searchViewMenuItem.getActionView();        int searchImgId = getResources().getIdentifier("android:id/search_button", null, null);        ImageView searchButton = (ImageView) searchView.findViewById(searchImgId);        searchButton.setImageResource(R.drawable.ic_search);        searchView.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);        searchView.setQueryHint("Search Contacts");        //searchView.setIconifiedByDefault(false);        searchView.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);        //int closeButtonId = getResources().getIdentifier("android:id/search_close_btn", null, null);        //ImageView searchClose = (ImageView) searchView.findViewById (closeButtonId);        //searchClose.setImageResource(R.drawable.close);        int searchPlateId = searchView.getContext().getResources().getIdentifier("android:id/search_plate", null, null);        View searchPlate = searchView.findViewById(searchPlateId);        if (searchPlate != null) {            int searchTextId = searchPlate.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);            TextView searchText = (TextView) searchPlate.findViewById(searchTextId);            searchText.setBackgroundResource(R.drawable.action_bar_bg_icon);            final AutoCompleteTextView searchTextView = (AutoCompleteTextView) searchView.findViewById(searchTextId);            try {                Field mCursorDrawableRes = TextView.class.getDeclaredField("mCursorDrawableRes");                mCursorDrawableRes.setAccessible(true);                mCursorDrawableRes.set(searchTextView, R.color.user_icon_bg); //This sets the cursor resource ID to 0 or @null which will make it visible on white background            } catch (Exception e) {            }            if (searchText != null) {                searchText.setTextColor(Color.WHITE);                searchText.setGravity(Gravity.CENTER_VERTICAL);                searchText.setHintTextColor(getResources().getColor(R.color.user_icon_bg));                searchText.setTextSize(15);                searchText.setImeOptions(EditorInfo.IME_ACTION_SEARCH);            }        }        return super.onPrepareOptionsMenu(menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        if (item.getItemId() == R.id.action_search) {            SearchView searchview;            SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);            searchview = (SearchView) item.getActionView();            searchview.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));            searchview.setOnQueryTextListener(this);            searchview.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);        }        return super.onOptionsItemSelected(item);    }    @Override    public boolean onQueryTextChange(String newText) {        if (contactsAdapter != null) {            contactsAdapter.getFilter().filter(newText);        }        return false;    }    @Override    public boolean onQueryTextSubmit(String query) {        return false;    }    @Override    public boolean onTouch(View v, MotionEvent event) {        int DRAWABLE_RIGHT = 2;        if (etAllContSearch.getText().toString().length() > 0) {            if (event.getAction() == MotionEvent.ACTION_UP) {                if (event.getRawX() >= (etAllContSearch.getRight() - etAllContSearch.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {                    // your action here                    etAllContSearch.setText("");                    return true;                }            }            if (etAllContSearch.getText().toString().length() == 0) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    etAllContSearch.requestFocus();                }            }            //mRecyclerView.setIndexBarVisibility(false);        } else {        }        //mRecyclerView.setIndexBarVisibility(false);        return false;    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.ok:                String jsonText = pref.getConferenceContact(ctx);                String addedContact = pref.getAddedContacts(ctx);                if (jsonText.length() > 0) {                    gc.set_Contact_sync_flag(ctx, true);                } else {                    gc.set_Contact_sync_flag(ctx, false);                }                if (jsonText != null && jsonText.length() != 0) {                    sendPositiveResult(jsonText, true, addedContact);                } else {                    finish();                }                /*if (jsonText != null && jsonText.length() != 0) {                    String lastAddedCall = pref.getLastAddedConferenceNumber();                    String[] numberFirstpart;                    String[] numberSecondPart = null;                    String finalAddedNumber;                    if(lastAddedCall.contains(",")){                        String[] newOne = lastAddedCall.split(",");                        for (int i = 0; i < newOne.length; i++) {                            System.out.println("Sip Contacts String" + newOne[i]);                            System.out.println("SIP Contact if " + i + " ");                            if (newOne[i].contains("wifi#")) {                                numberFirstpart = newOne[i].split("@");                                String[] firstStr = numberFirstpart[0].split(":");                                if (firstStr[1].contains("wifi#")) {                                    numberSecondPart = firstStr[1].split("wifi#");                                } else {                                    numberSecondPart = firstStr;                                }                            } else {                                numberFirstpart = newOne[i].split("@");                                numberSecondPart = numberFirstpart[0].split(":");                            }                        }                        finalAddedNumber = numberSecondPart[1];                    }else {                        if (lastAddedCall.contains("wifi#")) {                            numberFirstpart = lastAddedCall.split("@");                            String[] firstStr = numberFirstpart[0].split(":");                            if (firstStr[1].contains("wifi#")) {                                numberSecondPart = firstStr[1].split("wifi#");                            } else {                                numberSecondPart = firstStr;                            }                        } else {                            numberFirstpart = lastAddedCall.split("@");                            numberSecondPart = numberFirstpart[0].split(":");                        }                        finalAddedNumber = numberSecondPart[1];                    }                    System.out.println("AddConference : "+ finalAddedNumber);                    if(finalAddedNumber != null && finalAddedNumber.length() != 0) {                        Gson gson = new Gson();                        String[] text = gson.fromJson(number, String[].class);                        for (int i = 0; i < text.length; i++) {                            String test1 = text[1];                            System.out.println("AddConference : 1 "+ test1);                            if (test1.equals(finalAddedNumber)) {                               Toast.makeText(ctx, "Hello", Toast.LENGTH_SHORT).show();                            }                        }                    }else {                        System.out.println("AddConference : else ");                        sendPositiveResult(jsonText, true);                    }                } else {                    if (number != null && number.length() != 0) {                        sendPositiveResult(number, false);                    }                }*/                break;            case R.id.lyr_head:                number = contactList.get((Integer) v.getTag()).getEccId().toUpperCase();                break;        }    }    private void getSelectedItems(int length) {        String temp = "";        String[] array = null;        for (int i = 0; i < length; i++) {            temp += array[(int) completeList.getCheckItemIds()[i]];        }        //textView.setText(temp);    }    private void sendPositiveResult(String number, boolean multiplenumber, String conferenceAddedContact) {        Intent resultValue = new Intent();        System.out.println("Test conference number : => " + conferenceNum);        ToCall result = get_value(number);        if (result != null) {            Intent it = getIntent();            if (it != null) {                Bundle b = it.getExtras();                if (b != null) {                    resultValue.putExtras(b);                }            }            resultValue.putExtra(SipProfile.FIELD_ID,                    result.getAccountId());            resultValue.putExtra(Intent.EXTRA_PHONE_NUMBER,                    result.getCallee());            resultValue.putExtra("newAddedContact",                    conferenceAddedContact);            /*resultValue.putExtra("conference_contact",                    conferenceNum);*/            setResult(RESULT_OK, resultValue);        } else {            setResult(RESULT_CANCELED);        }        finish();    }    /*private void sendPositiveResult(String number, boolean multiplenumber) {        Intent resultValue = new Intent();        PrefManager pref = new PrefManager(this);        String getConferenceContact = pref.getConferenceNumber();        System.out.println("Add Conference call "+ getConferenceContact);        ToCall result = get_value(number);        if (result != null) {            Intent it = getIntent();            if (it != null) {                Bundle b = it.getExtras();                if (b != null) {                    resultValue.putExtras(b);                }            }            resultValue.putExtra(SipProfile.FIELD_ID,                    result.getAccountId());            if(getConferenceContact != null){                if (getConferenceContact.contains(",")) {                    System.out.println("Add Conference contains , ");                    String[] jjCallee = getConferenceContact.split(",");                    for (int i = 0; i < jjCallee.length; i++) {                        String newNumber = jjCallee[i];                        if (newNumber.equals(result.getCallee())) {                            System.out.println("Add Conference contact match ");                            Boast.makeText(this,"Selected contact is already in conference", Toast.LENGTH_LONG).show();                            setResult(RESULT_CANCELED);                        } else {                            System.out.println("Add Conference contact not match ");                            resultValue.putExtra(Intent.EXTRA_PHONE_NUMBER,                                    result.getCallee());                            setResult(RESULT_OK, resultValue);                        }                    }                } else {                    System.out.println("Add Conference not contains , ");                    if(getConferenceContact.contains(result.getCallee())){                        System.out.println("Add Conference contact match if ");                        Boast.makeText(this,"Selected contact is already in conference", Toast.LENGTH_LONG).show();                        setResult(RESULT_CANCELED);                    }else{                        System.out.println("Add Conference contact not match else ");                        resultValue.putExtra(Intent.EXTRA_PHONE_NUMBER,                                result.getCallee());                        setResult(RESULT_OK, resultValue);                    }                }            }else{                resultValue.putExtra(Intent.EXTRA_PHONE_NUMBER,                        result.getCallee());                setResult(RESULT_OK, resultValue);            }        } else {            setResult(RESULT_CANCELED);        }        finish();    }*/    public ToCall get_value(String number) {        String toCall = "";        Long accountToUse = null;        String dataType = gc.checkNetworkType(ctx);        Cursor c = ctx.getContentResolver().query(SipProfile.ACCOUNT_URI, null, null, null, null);        c.moveToFirst();        SipProfile account = new SipProfile(c);        if (account == null) {            return null;        }        if (account != null) {            accountToUse = account.id;            Gson gson = new Gson();            String[] text = gson.fromJson(number, String[].class);            String sipCont1 = "";            for (int i = 0; i < text.length; i++) {                String newNumber = text[i];                String fNumber;                String callee;                if (dataType != null && dataType.length() != 0) {                    fNumber = dataType + newNumber;                } else {                    fNumber = newNumber;                }                if (accountToUse > SipProfile.INVALID_ID) {                    if (Pattern.matches(".*@.*", fNumber)) {                        callee = "sip:" + fNumber + "";                    } else if (!TextUtils.isEmpty(URLCollection.obj.SERVER_SIP_IP)) {                        callee = "sip:" + fNumber + "@" + URLCollection.obj.SERVER_SIP_IP;                    } else {                        callee = "sip:" + fNumber;                    }                    if (i == text.length - 1) {                        sipCont1 = sipCont1 + callee;                    } else {                        sipCont1 = callee + ",";                    }                } else {                    sipCont1 = fNumber;                }                toCall = sipCont1;            }        } else {            Gson gson = new Gson();            String[] text = gson.fromJson(number, String[].class);            String sipCont1 = "";            for (int i = 0; i < text.length; i++) {                String newNumber = text[i];                String callee;                String fNumber;                if (dataType != null && dataType.length() != 0) {                    fNumber = dataType + newNumber;                } else {                    fNumber = newNumber;                }                if (accountToUse > SipProfile.INVALID_ID) {                    if (Pattern.matches(".*@.*", fNumber)) {                        callee = "sip:" + fNumber + "";                    } else if (!TextUtils.isEmpty(URLCollection.obj.SERVER_SIP_IP)) {                        callee = "sip:" + fNumber + "@" + URLCollection.obj.SERVER_SIP_IP;                    } else {                        callee = "sip:" + fNumber;                    }                    if (i == text.length - 1) {                        sipCont1 = sipCont1 + callee;                    } else {                        sipCont1 = callee + ",";                    }                } else {                    sipCont1 = fNumber;                }                toCall = sipCont1;            }        }        return new ToCall(accountToUse, toCall);    }    /*public ToCall get_value(String number,boolean multiplenumber) {        String toCall = "";        Long accountToUse = null;        Cursor c = ctx.getContentResolver().query(SipProfile.ACCOUNT_URI, null, null, null, null);        c.moveToFirst();        SipProfile account= new SipProfile(c);        if (account == null) {            return null;        }        if (account != null) {            accountToUse = account.id;            if(multiplenumber){                Gson gson = new Gson();                String[] text = gson.fromJson(number, String[].class);                String sipCont1 = "";                for (int i = 0; i < text.length; i++) {                    String newNumber = text[i];                    String callee;                    if (accountToUse > SipProfile.INVALID_ID) {                        if (Pattern.matches(".*@.*", newNumber)) {                            callee = "sip:" + newNumber + "";                        } else if (!TextUtils.isEmpty(URLCollection.obj.SERVER_SIP_IP)) {                            callee = "sip:" + newNumber + "@" + URLCollection.obj.SERVER_SIP_IP;                        } else {                            callee = "sip:" + newNumber;                        }                        if (i == text.length-1) {                            sipCont1 = sipCont1 + callee ;                        } else {                            sipCont1 = callee + ",";                        }                    } else {                        sipCont1 = newNumber;                    }                    toCall = sipCont1;                }            }else {                if (accountToUse > SipProfile.INVALID_ID) {                    if (Pattern.matches(".*@.*", number)) {                        toCall = "sip:" + number + "";                    } else if (!TextUtils.isEmpty(URLCollection.obj.SERVER_SIP_IP)) {                        toCall = "sip:" + number + "@" + URLCollection.obj.SERVER_SIP_IP;                    } else {                        toCall = "sip:" + number;                    }                } else {                    toCall = number;                }            }        } else {            if(multiplenumber){                Gson gson = new Gson();                String[] text = gson.fromJson(number, String[].class);                String sipCont1 = "";                for (int i = 0; i < text.length; i++) {                    String newNumber = text[i];                    String callee;                    if (accountToUse > SipProfile.INVALID_ID) {                        if (Pattern.matches(".*@.*", newNumber)) {                            callee = "sip:" + newNumber + "";                        } else if (!TextUtils.isEmpty(URLCollection.obj.SERVER_SIP_IP)) {                            callee = "sip:" + newNumber + "@" + URLCollection.obj.SERVER_SIP_IP;                        } else {                            callee = "sip:" + newNumber;                        }                        if (i == text.length-1) {                            sipCont1 = sipCont1 + callee ;                        } else {                            sipCont1 = callee + ",";                        }                    } else {                        sipCont1 = newNumber;                    }                    toCall = sipCont1;                }            }else{                toCall = number;            }        }        return new ToCall(accountToUse, toCall);    }*/    public static class ToCall {        private Long accountId;        private String callee;        public ToCall(Long acc, String uri) {            accountId = acc;            callee = uri;        }        /**         * @return the pjsipAccountId         */        public Long getAccountId() {            return accountId;        }        /**         * @return the callee         */        public String getCallee() {            return callee;        }    }    ;}